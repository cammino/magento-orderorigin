From ed35778d7094152b16fdfc39a80fb500e34a477b Mon Sep 17 00:00:00 2001
From: ArthurMenegoli <arthur.menegoli@gmail.com>
Date: Thu, 26 Jan 2023 09:23:12 -0300
Subject: [PATCH] #43313 - Add order origin to order grid

---
 .../Mage/Adminhtml/Block/Sales/Order/Grid.php | 510 +++++++++---------
 1 file changed, 264 insertions(+), 246 deletions(-)

diff --git a/app/code/local/Mage/Adminhtml/Block/Sales/Order/Grid.php b/app/code/local/Mage/Adminhtml/Block/Sales/Order/Grid.php
index 699ba100..58509fa9 100644
--- a/app/code/local/Mage/Adminhtml/Block/Sales/Order/Grid.php
+++ b/app/code/local/Mage/Adminhtml/Block/Sales/Order/Grid.php
@@ -1,247 +1,265 @@
-<?php
-/**
- * Magento
- *
- * NOTICE OF LICENSE
- *
- * This source file is subject to the Open Software License (OSL 3.0)
- * that is bundled with this package in the file LICENSE.txt.
- * It is also available through the world-wide-web at this URL:
- * http://opensource.org/licenses/osl-3.0.php
- * If you did not receive a copy of the license and are unable to
- * obtain it through the world-wide-web, please send an email
- * to license@magento.com so we can send you a copy immediately.
- *
- * DISCLAIMER
- *
- * Do not edit or add to this file if you wish to upgrade Magento to newer
- * versions in the future. If you wish to customize Magento for your
- * needs please refer to http://www.magento.com for more information.
- *
- * @category    Mage
- * @package     Mage_Adminhtml
- * @copyright  Copyright (c) 2006-2017 X.commerce, Inc. and affiliates (http://www.magento.com)
- * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
- */
-
-/**
- * Adminhtml sales orders grid
- *
- * @category   Mage
- * @package    Mage_Adminhtml
- * @author      Magento Core Team <core@magentocommerce.com>
- */
-class Mage_Adminhtml_Block_Sales_Order_Grid extends Mage_Adminhtml_Block_Widget_Grid
-{
-	 public function __construct()
-    {
-        parent::__construct();
-        $this->setId('sales_order_grid');
-        $this->setUseAjax(true);
-        $this->setDefaultSort('created_at');
-        $this->setDefaultDir('DESC');
-        $this->setSaveParametersInSession(true);
-    }
- 
-    /**
-     * Retrieve collection class
-     *
-     * @return string
-     */
-    protected function _getCollectionClass()
-    {
-        return 'sales/order_grid_collection';
-    }
- 
-    protected function _prepareCollection()
-    {
-        $collection = Mage::getResourceModel($this->_getCollectionClass());
-
-         $collection->getSelect()->joinLeft(array('sfog' => 'sales_flat_order_grid'), 'main_table.entity_id = sfog.entity_id', array('sfog.shipping_name','sfog.billing_name'));
-
-        $collection->getSelect()->joinLeft(array('sfo' => 'sales_flat_order'), 'sfo.entity_id=main_table.entity_id', array('sfo.customer_email', 'sfo.increment_id', 'sfo.store_id', 'sfo.created_at', 'sfo.status', 'sfo.base_grand_total', 'sfo.grand_total'));
-
-        $collection->getSelect()->joinLeft(array('address' => 'sales_flat_order_address'), 'main_table.entity_id = address.parent_id AND address.address_type="billing"', array('address.region', 'address.city'));
-
-        $this->setCollection($collection);
-        return Mage_Adminhtml_Block_Widget_Grid::_prepareCollection();
-    }
- 
-    protected function _prepareColumns()
-    {
- 
-       $this->addColumn('real_order_id', array(
-            'header' => Mage::helper('sales')->__('Order #'),
-            'width' => '80px',
-            'type' => 'text',
-            'index' => 'increment_id',
-            'filter_index' => 'sfo.increment_id'
-        ));
-
-        if (!Mage::app()->isSingleStoreMode()) {
-            $this->addColumn('store_id', array(
-                'header' => Mage::helper('sales')->__('Purchased From (Store)'),
-                'index' => 'store_id',
-                'type' => 'store',
-                'store_view' => true,
-                'display_deleted' => true,
-                'filter_index' => 'sfo.store_id'
-            ));
-        }
-
-        $this->addColumn('created_at', array(
-            'header' => Mage::helper('sales')->__('Purchased On'),
-            'index' => 'created_at',
-            'type' => 'datetime',
-            'width' => '100px',
-            'filter_index' => 'sfo.created_at'
-        ));
-
-        $this->addColumn('billing_name', array(
-            'header' => Mage::helper('sales')->__('Bill to Name'),
-            'index' => 'billing_name',
-            'filter_index' => 'sfog.billing_name',
-            'filter_condition_callback' => array($this, '_filterFullName')
-        ));
-
-        $this->addColumn('shipping_name', array(
-            'header' => Mage::helper('sales')->__('Ship to Name'),
-            'index' => 'shipping_name',
-            'filter_index' => 'sfog.shipping_name'
-        ));
-
-        $this->addColumn('city', array(
-            'header' => 'Cidade',
-            'index' => 'city',
-            'filter_index' => 'address.city',
-            
-        ));
-
-        $this->addColumn('region', array(
-            'header' => 'Estado',
-            'index' => 'region',
-            'filter_index' => 'address.region',
-        ));
-
-        $this->addColumn('base_grand_total', array(
-            'header' => Mage::helper('sales')->__('G.T. (Base)'),
-            'index' => 'base_grand_total',
-            'type' => 'currency',
-            'currency' => 'base_currency_code',
-            'filter_index' => 'sfo.base_grand_total'
-        ));
-
-        $this->addColumn('grand_total', array(
-            'header' => Mage::helper('sales')->__('G.T. (Purchased)'),
-            'index' => 'grand_total',
-            'type' => 'currency',
-            'currency' => 'order_currency_code',
-            'filter_index' => 'sfo.grand_total'
-        ));
-
-        $this->addColumn('status', array(
-            'header' => Mage::helper('sales')->__('Status'),
-            'index' => 'status',
-            'type' => 'options',
-            'width' => '70px',
-            'filter_index' => 'sfo.status',
-            'options' => Mage::getSingleton('sales/order_config')->getStatuses(),
-        ));
-
-        if (Mage::getSingleton('admin/session')->isAllowed('sales/order/actions/view')) {
-            $this->addColumn('action', array(
-                'header' => Mage::helper('sales')->__('Action'),
-                'width' => '50px',
-                'type' => 'action',
-                'getter' => 'getId',
-                'actions' => array(
-                    array(
-                        'caption' => Mage::helper('sales')->__('View'),
-                        'url' => array('base' => '*/sales_order/view'),
-                        'field' => 'order_id'
-                    )
-                ),
-                'filter' => false,
-                'sortable' => false,
-                'index' => 'stores',
-                'is_system' => true,
-            ));
-        }
-        $this->addRssList('rss/order/new', Mage::helper('sales')->__('New Order RSS'));
-
-        $this->addExportType('*/*/exportCsv', Mage::helper('sales')->__('CSV'));
-        $this->addExportType('*/*/exportExcel', Mage::helper('sales')->__('Excel XML'));
-
-        return Mage_Adminhtml_Block_Widget_Grid::_prepareColumns();
-    }
-    
-    protected function _filterFullName($collection, $column) {
-        $value = $column->getFilter()->getValue();
-        if (!empty($value))
-            $this->getCollection()->getSelect()->where("REPLACE(sfog.billing_name, '  ', ' ') like '%" . $value . "%'" );
-        return $this;
-    }
-
-
-    protected function _prepareMassaction()
-    {
-        $this->setMassactionIdField('entity_id');
-        $this->getMassactionBlock()->setFormFieldName('order_ids');
-        $this->getMassactionBlock()->setUseSelectAll(false);
- 
-        if (Mage::getSingleton('admin/session')->isAllowed('sales/order/actions/cancel')) {
-            $this->getMassactionBlock()->addItem('cancel_order', array(
-                 'label'=> Mage::helper('sales')->__('Cancel'),
-                 'url'  => $this->getUrl('*/sales_order/massCancel'),
-            ));
-        }
- 
-        if (Mage::getSingleton('admin/session')->isAllowed('sales/order/actions/hold')) {
-            $this->getMassactionBlock()->addItem('hold_order', array(
-                 'label'=> Mage::helper('sales')->__('Hold'),
-                 'url'  => $this->getUrl('*/sales_order/massHold'),
-            ));
-        }
- 
-        if (Mage::getSingleton('admin/session')->isAllowed('sales/order/actions/unhold')) {
-            $this->getMassactionBlock()->addItem('unhold_order', array(
-                 'label'=> Mage::helper('sales')->__('Unhold'),
-                 'url'  => $this->getUrl('*/sales_order/massUnhold'),
-            ));
-        }
- 
-        $this->getMassactionBlock()->addItem('pdfinvoices_order', array(
-             'label'=> Mage::helper('sales')->__('Print Invoices'),
-             'url'  => $this->getUrl('*/sales_order/pdfinvoices'),
-        ));
- 
-        $this->getMassactionBlock()->addItem('pdfshipments_order', array(
-             'label'=> Mage::helper('sales')->__('Print Packingslips'),
-             'url'  => $this->getUrl('*/sales_order/pdfshipments'),
-        ));
- 
-        $this->getMassactionBlock()->addItem('pdfcreditmemos_order', array(
-             'label'=> Mage::helper('sales')->__('Print Credit Memos'),
-             'url'  => $this->getUrl('*/sales_order/pdfcreditmemos'),
-        ));
- 
-        $this->getMassactionBlock()->addItem('pdfdocs_order', array(
-             'label'=> Mage::helper('sales')->__('Print All'),
-             'url'  => $this->getUrl('*/sales_order/pdfdocs'),
-        ));
- 
-        return $this;
-    }
- 
-    public function getRowUrl($row)
-    {
-        if (Mage::getSingleton('admin/session')->isAllowed('sales/order/actions/view')) {
-            return $this->getUrl('*/sales_order/view', array('order_id' => $row->getId()));
-        }
-        return false;
-    }
-    public function getGridUrl()
-    {
-        return $this->getUrl('*/*/grid', array('_current'=>true));
-    }
+<?php
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/osl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magento.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magento.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_Adminhtml
+ * @copyright  Copyright (c) 2006-2017 X.commerce, Inc. and affiliates (http://www.magento.com)
+ * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
+ */
+
+/**
+ * Adminhtml sales orders grid
+ *
+ * @category   Mage
+ * @package    Mage_Adminhtml
+ * @author      Magento Core Team <core@magentocommerce.com>
+ */
+class Mage_Adminhtml_Block_Sales_Order_Grid extends Mage_Adminhtml_Block_Widget_Grid
+{
+	 public function __construct()
+    {
+        parent::__construct();
+        $this->setId('sales_order_grid');
+        $this->setUseAjax(true);
+        $this->setDefaultSort('created_at');
+        $this->setDefaultDir('DESC');
+        $this->setSaveParametersInSession(true);
+    }
+ 
+    /**
+     * Retrieve collection class
+     *
+     * @return string
+     */
+    protected function _getCollectionClass()
+    {
+        return 'sales/order_grid_collection';
+    }
+ 
+    protected function _prepareCollection()
+    {
+        $collection = Mage::getResourceModel($this->_getCollectionClass());
+
+        $collection->getSelect()->joinLeft(array('sfog' => 'sales_flat_order_grid'), 'main_table.entity_id = sfog.entity_id', array('sfog.shipping_name','sfog.billing_name'));
+
+        $collection->getSelect()->joinLeft(array('sfo' => 'sales_flat_order'), 'sfo.entity_id=main_table.entity_id', array('sfo.customer_email', 'sfo.increment_id', 'sfo.store_id', 'sfo.created_at', 'sfo.status', 'sfo.base_grand_total', 'sfo.grand_total', 'sfo.utm_source', 'sfo.utm_campaign', 'sfo.utm_medium'));
+
+        $collection->getSelect()->joinLeft(array('address' => 'sales_flat_order_address'), 'main_table.entity_id = address.parent_id AND address.address_type="billing"', array('address.region', 'address.city'));
+
+        $this->setCollection($collection);
+        return Mage_Adminhtml_Block_Widget_Grid::_prepareCollection();
+    }
+ 
+    protected function _prepareColumns()
+    {
+ 
+       $this->addColumn('real_order_id', array(
+            'header' => Mage::helper('sales')->__('Order #'),
+            'width' => '80px',
+            'type' => 'text',
+            'index' => 'increment_id',
+            'filter_index' => 'sfo.increment_id'
+        ));
+
+        if (!Mage::app()->isSingleStoreMode()) {
+            $this->addColumn('store_id', array(
+                'header' => Mage::helper('sales')->__('Purchased From (Store)'),
+                'index' => 'store_id',
+                'type' => 'store',
+                'store_view' => true,
+                'display_deleted' => true,
+                'filter_index' => 'sfo.store_id'
+            ));
+        }
+
+        $this->addColumn('created_at', array(
+            'header' => Mage::helper('sales')->__('Purchased On'),
+            'index' => 'created_at',
+            'type' => 'datetime',
+            'width' => '100px',
+            'filter_index' => 'sfo.created_at'
+        ));
+
+        $this->addColumn('billing_name', array(
+            'header' => Mage::helper('sales')->__('Bill to Name'),
+            'index' => 'billing_name',
+            'filter_index' => 'sfog.billing_name',
+            'filter_condition_callback' => array($this, '_filterFullName')
+        ));
+
+        $this->addColumn('shipping_name', array(
+            'header' => Mage::helper('sales')->__('Ship to Name'),
+            'index' => 'shipping_name',
+            'filter_index' => 'sfog.shipping_name'
+        ));
+
+        $this->addColumn('utm_source', array(
+            'header' => 'utm_source',
+            'index' => 'utm_source',
+            'filter_index' => 'sfo.utm_source'
+        ));
+
+        $this->addColumn('utm_medium', array(
+            'header' => 'utm_medium',
+            'index' => 'utm_medium',
+            'filter_index' => 'sfo.utm_medium'
+        ));
+
+        $this->addColumn('utm_campaign', array(
+            'header' => 'utm_campaign',
+            'index' => 'utm_campaign',
+            'filter_index' => 'sfo.utm_campaign'
+        ));
+
+        $this->addColumn('city', array(
+            'header' => 'Cidade',
+            'index' => 'city',
+            'filter_index' => 'address.city',
+            
+        ));
+
+        $this->addColumn('region', array(
+            'header' => 'Estado',
+            'index' => 'region',
+            'filter_index' => 'address.region',
+        ));
+
+        $this->addColumn('base_grand_total', array(
+            'header' => Mage::helper('sales')->__('G.T. (Base)'),
+            'index' => 'base_grand_total',
+            'type' => 'currency',
+            'currency' => 'base_currency_code',
+            'filter_index' => 'sfo.base_grand_total'
+        ));
+
+        $this->addColumn('grand_total', array(
+            'header' => Mage::helper('sales')->__('G.T. (Purchased)'),
+            'index' => 'grand_total',
+            'type' => 'currency',
+            'currency' => 'order_currency_code',
+            'filter_index' => 'sfo.grand_total'
+        ));
+
+        $this->addColumn('status', array(
+            'header' => Mage::helper('sales')->__('Status'),
+            'index' => 'status',
+            'type' => 'options',
+            'width' => '70px',
+            'filter_index' => 'sfo.status',
+            'options' => Mage::getSingleton('sales/order_config')->getStatuses(),
+        ));
+
+        if (Mage::getSingleton('admin/session')->isAllowed('sales/order/actions/view')) {
+            $this->addColumn('action', array(
+                'header' => Mage::helper('sales')->__('Action'),
+                'width' => '50px',
+                'type' => 'action',
+                'getter' => 'getId',
+                'actions' => array(
+                    array(
+                        'caption' => Mage::helper('sales')->__('View'),
+                        'url' => array('base' => '*/sales_order/view'),
+                        'field' => 'order_id'
+                    )
+                ),
+                'filter' => false,
+                'sortable' => false,
+                'index' => 'stores',
+                'is_system' => true,
+            ));
+        }
+        $this->addRssList('rss/order/new', Mage::helper('sales')->__('New Order RSS'));
+
+        $this->addExportType('*/*/exportCsv', Mage::helper('sales')->__('CSV'));
+        $this->addExportType('*/*/exportExcel', Mage::helper('sales')->__('Excel XML'));
+
+        return Mage_Adminhtml_Block_Widget_Grid::_prepareColumns();
+    }
+    
+    protected function _filterFullName($collection, $column) {
+        $value = $column->getFilter()->getValue();
+        if (!empty($value))
+            $this->getCollection()->getSelect()->where("REPLACE(sfog.billing_name, '  ', ' ') like '%" . $value . "%'" );
+        return $this;
+    }
+
+
+    protected function _prepareMassaction()
+    {
+        $this->setMassactionIdField('entity_id');
+        $this->getMassactionBlock()->setFormFieldName('order_ids');
+        $this->getMassactionBlock()->setUseSelectAll(false);
+ 
+        if (Mage::getSingleton('admin/session')->isAllowed('sales/order/actions/cancel')) {
+            $this->getMassactionBlock()->addItem('cancel_order', array(
+                 'label'=> Mage::helper('sales')->__('Cancel'),
+                 'url'  => $this->getUrl('*/sales_order/massCancel'),
+            ));
+        }
+ 
+        if (Mage::getSingleton('admin/session')->isAllowed('sales/order/actions/hold')) {
+            $this->getMassactionBlock()->addItem('hold_order', array(
+                 'label'=> Mage::helper('sales')->__('Hold'),
+                 'url'  => $this->getUrl('*/sales_order/massHold'),
+            ));
+        }
+ 
+        if (Mage::getSingleton('admin/session')->isAllowed('sales/order/actions/unhold')) {
+            $this->getMassactionBlock()->addItem('unhold_order', array(
+                 'label'=> Mage::helper('sales')->__('Unhold'),
+                 'url'  => $this->getUrl('*/sales_order/massUnhold'),
+            ));
+        }
+ 
+        $this->getMassactionBlock()->addItem('pdfinvoices_order', array(
+             'label'=> Mage::helper('sales')->__('Print Invoices'),
+             'url'  => $this->getUrl('*/sales_order/pdfinvoices'),
+        ));
+ 
+        $this->getMassactionBlock()->addItem('pdfshipments_order', array(
+             'label'=> Mage::helper('sales')->__('Print Packingslips'),
+             'url'  => $this->getUrl('*/sales_order/pdfshipments'),
+        ));
+ 
+        $this->getMassactionBlock()->addItem('pdfcreditmemos_order', array(
+             'label'=> Mage::helper('sales')->__('Print Credit Memos'),
+             'url'  => $this->getUrl('*/sales_order/pdfcreditmemos'),
+        ));
+ 
+        $this->getMassactionBlock()->addItem('pdfdocs_order', array(
+             'label'=> Mage::helper('sales')->__('Print All'),
+             'url'  => $this->getUrl('*/sales_order/pdfdocs'),
+        ));
+ 
+        return $this;
+    }
+ 
+    public function getRowUrl($row)
+    {
+        if (Mage::getSingleton('admin/session')->isAllowed('sales/order/actions/view')) {
+            return $this->getUrl('*/sales_order/view', array('order_id' => $row->getId()));
+        }
+        return false;
+    }
+    public function getGridUrl()
+    {
+        return $this->getUrl('*/*/grid', array('_current'=>true));
+    }
 }
\ No newline at end of file
-- 
2.17.1

